GiGit
===

As a web developer it's always a hassle to publish pages via FTP, specially if there are a lot of changes.

Thanks to Git, I can say good bye to FTP. (For real!). 

I made them for my personal projects, and released them under the MIT license for anyone who may need them for their own project


---


### What is GiGit? ###


GiGit is a git hack that I put together to help me setup a deployment environment on my sites. 

GiGit creates a deployment environment to push content from a staging repo to a production site.


### Install ###


Installing GiGit is pretty straight forward.

1. Clone this repo over to your site environment
2. cd GiGit
3. chmod +x gigit


### Create the environment  ###

 ./gigit -f -s "StagingRepo" -p "ProductionDir" -n "DeployName"


#### Params
> -f : force it to create folders and repos that don't exist

> -s || --staging : The staging directory name from $HOME

> -p || --production : The production directy where the files will be pushed from staging to development

> -n || --name : The name of the deployment. Will be used to create the bare repo

> -h || --help : The help menu


### How to deploy ###

1. Push your changes to the Staging Repo
2. $HOME/$DeployName.git/gigit-deploy
It copy your changes from Staging to Production


#### A simple Example 

Let's say you a site www.mysite.com in the folder /public_www

You setup a staging environment stage.mysite.com in the folder /public_stage

After you push changes to stage.mysite.com, you want to publish them to www

So copy GiGit into your $HOME directory

`./gigit -f -s "public_stage" -p "public_www" -n "web"`


Now after you push your changes to public_stage

you can run: `./web.git/gigit-deploy` 

It will copy over the changes from `public_stage` to `public_www`


That's it!

 



